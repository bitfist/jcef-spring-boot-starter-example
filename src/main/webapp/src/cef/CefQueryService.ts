/** AUTO-GENERATED by JCEF TypeScriptGeneratorProcessor â€“ DO NOT EDIT **/

/**
 * Allowed response types for parsing CEF query results.
 */
export type ResponseType = 'auto' | 'string' | 'number' | 'boolean' | 'object';

export class CefQueryService {
    static request<T>(
        route: string,
        payload: any,
        responseType: ResponseType = 'auto'
    ): Promise<T> {
        const request = JSON.stringify({ route, payload });
        return new Promise((resolve, reject) => {
            window.cefQuery({
                request,
                persistent: false,
                onSuccess: response => {
                    const lower = response.toLowerCase();

                    const parseBoolean = () => (lower === 'true') as unknown as T;
                    const parseNumber  = () => Number(response) as unknown as T;
                    const parseObject  = () => JSON.parse(response) as T;
                    const parseString  = () => response as unknown as T;

                    let result: T;
                    try {
                        switch (responseType) {
                            case 'boolean':
                                result = parseBoolean();
                                break;

                            case 'number':
                                result = parseNumber();
                                break;

                            case 'object':
                                result = parseObject();
                                break;

                            case 'string':
                                result = parseString();
                                break;

                            case 'auto':
                            default:
                                // auto-detect logic
                                if (lower === 'true' || lower === 'false') {
                                    result = parseBoolean();
                                } else if (
                                    !Number.isNaN(Number(response)) &&
                                    String(Number(response)) === response
                                ) {
                                    result = parseNumber();
                                } else if (response.startsWith('{') || response.startsWith('[')) {
                                    try {
                                        const parsed = JSON.parse(response);
                                        if (parsed !== null && typeof parsed === 'object') {
                                            result = parsed as T;
                                            break;
                                        }
                                    } catch {
                                        // fall through to string
                                    }
                                    result = parseString();
                                } else {
                                    result = parseString();
                                }
                                break;
                        }
                    } catch {
                        // on any parsing error, fallback to raw string
                        result = parseString();
                    }

                    resolve(result);
                },
                onFailure: err => reject(err),
            });
        });
    }
}
